[
  {
    "timestamp": "2025-08-06T19:02:41.083821",
    "question": "import streamlit as st import query_index from perplexity_client import explain_with_perplexity from modules.clause_parser import chunk_contract_text from modules.reranker import rerank_clauses import json import datetime from config import FEEDBACK_PATH  st.set_page_config(page_title=\"Contract Clause Explainer\", layout=\"wide\") st.title(\"\ud83d\udcdc Contract Clause Explainer\")  # Helper to safely pick a field from hit dict def get_field(hit, *candidates, default=None):     for name in candidates:         if name in hit:             return hit[name]     return default  # Initialize feedback store if FEEDBACK_PATH.exists():     feedback_list = json.loads(FEEDBACK_PATH.read_text()) else:     feedback_list = []  # --- Sidebar: Semantic Search Only --- st.sidebar.header(\"Semantic Clause Search\") question   = st.sidebar.text_input(\"Type your clause-related question:\") top_k      = st.sidebar.slider(\"Number of results\", 1, 10, 5) use_rerank = st.sidebar.checkbox(\"Enable reranking\", value=True)  results = [] if question:     with st.spinner(\"Searching clauses\u2026\"):         raw_results = query_index.query_index(question, top_k)      # Debug: show keys of first result if missing id     if raw_results and \"id\" not in raw_results[0]:         st.sidebar.warning(             \"\u26a0\ufe0f Raw result dict keys: \" + \", \".join(raw_results[0].keys())         )      st.success(f\"Found {len(raw_results)} clauses\")      # Build a uniform list of candidates     candidates = []     for hit in raw_results:         cid   = get_field(hit, \"id\", \"clause_id\")         text  = get_field(hit, \"clause\", \"clause_text\", \"text\", default=\"\")         score = get_field(hit, \"score\", \"similarity\", \"distance\", default=0.0)         candidates.append({             \"clause_id\": cid,             \"clause_text\": text,             \"initial_score\": score         })      # Optionally rerank     if use_rerank:         results = rerank_clauses(question, candidates)     else:         # carry over initial_score, set rerank_score None         results = [             {                 **c,                 \"rerank_score\": None             }             for c in candidates         ]      # Display all results     st.subheader(\"Search Results\")     for idx, item in enumerate(results, start=1):         cid          = item[\"clause_id\"]         clause_text  = item[\"clause_text\"]         init_score   = item[\"initial_score\"] or 0.0         rerank_score = item.get(\"rerank_score\")          st.markdown(f\"**{idx}.** ({cid}) {clause_text}\")         caption = (             f\"Initial Score: {init_score:.3f} | Rerank Score: {rerank_score:.3f}\"             if rerank_score is not None             else f\"Score: {init_score:.3f}\"         )         st.caption(caption)          # Upvote / Downvote buttons         col1, col2 = st.columns(2)         up   = col1.button(\"\ud83d\udc4d Upvote\", key=f\"up_{cid}\")         down = col2.button(\"\ud83d\udc4e Downvote\", key=f\"down_{cid}\")         if up or down:             feedback_list.append({                 \"timestamp\": datetime.datetime.utcnow().isoformat(),                 \"question\": question,                 \"clause_id\": cid,                 \"feedback\": 1 if up else -1,             })             FEEDBACK_PATH.parent.mkdir(parents=True, exist_ok=True)             FEEDBACK_PATH.write_text(json.dumps(feedback_list, indent=2))             st.success(\"Thanks for your feedback!\")      # --- Enhanced Section: Select & Preview One Clause ---     st.subheader(\"Explain One of the Above Clauses\")     if results:         options = [             f\"{item['clause_id']}: {item['clause_text'][:80]}{'\u2026' if len(item['clause_text']) > 80 else ''}\"             for item in results         ]         choice = st.selectbox(\"Choose a clause to explain:\", options)          # Immediately show the full text         selected_id   = choice.split(\":\")[0]         selected_text = next(             item[\"clause_text\"] for item in results if item[\"clause_id\"] == selected_id         )         st.markdown(\"**Selected Clause Preview:**\")         st.write(selected_text)          if st.button(\"Explain Selected Clause\"):             with st.spinner(\"Generating explanation\u2026\"):                 explanation = explain_with_perplexity(selected_text)             st.markdown(f\"### \ud83e\uddfe Explanation for {selected_id}\")             st.code(selected_text)             st.write(explanation)     else:         st.info(\"No clauses to select. Ask a question to see results.\")  else:     st.info(\"Type a question in the sidebar to search clauses.\")  st.markdown(\"---\")  # --- Explain Uploaded Contract UI --- st.subheader(\"Explain Clauses from Uploaded Contract\") contract_text = st.text_area(\"Paste your full contract text here:\", height=300)  if contract_text.strip():     clause_blocks = chunk_contract_text(contract_text)     clause_ids    = [blk[\"id\"] for blk in clause_blocks]      selected_id   = st.sidebar.selectbox(\"Choose a clause to explain:\", clause_ids)     selected_text = next(blk[\"text\"] for blk in clause_blocks if blk[\"id\"] == selected_id)      if st.button(\"Explain Selected Clause from Upload\"):         with st.spinner(\"Generating explanation\u2026\"):             explanation = explain_with_perplexity(selected_text)          st.markdown(f\"### \ud83e\uddfe Explanation for Clause {selected_id}\")         st.code(selected_text)         st.write(explanation) else:     st.info(\"Paste contract text above to parse and explain clauses.\")",
    "clause_id": null,
    "feedback": 1
  }
]